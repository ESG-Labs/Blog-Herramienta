html,body
{
  font-family: 'Raleway', sans-serif;
  margin: 0;
  padding: 0;
}
.inputCnt
{ 
  /*this prop makes the container width automatic*/
  display:table;
}
ul
  {    
    user-select: none;
    border-radius:60px;
    background: #dbdbdb;
    padding: 1vw;    
    color:#727272;
  }
.navBar > li
{
  padding: 1vw;
}
li.divider.dvdrTop
{
  padding:.15vw;
  padding-bottom: 0.25vw;
  background: #cecece;
}
.navBar
{
  border-radius:00px;
  background-color: #c2c2c2;
  color:#565656;      
}
.navBar > li:hover
{
  /*background:#565656; maybe ill use this variant in the end
  /*color:#c1c1c1;*/
  box-shadow:inset 0px -100px 0px #e7e7e7;
  /*font-weight: 900;*/
}
li
{
  transition: .2s ease-in-out;
  padding: .40vw;  
  padding-left:1vw;
  display: inline;  
}
li:hover{color:#3a3a3a; cursor:pointer;}
.divider
{       
  padding:.15vw;
  padding-bottom: 0.25vw;
  background: #c6c6c6;
}

.txtInpt
{ 
  width:70vw;
  height:inherit;
  font-size:2vw;
  background:#efefef;
  border: 0;  
}
/*
  here is the trick
  once you clicked on a button it will add the class to the input field text
  in javascript. that easy (WTF!), maybe set this properties in a separated css file.
  also depending on the edits the int text area the corresponding edit icon will
  be shown in a different color, this to let the user know wether its beeing
  used or nah
*/
/*to make them work just add them with javascript, it does work if you manually type them in the class
section of the input ( the one with class txtInpt)*/
@media only screen and (min-width:900px)
  {
    .toolsNext{display:none}
  }